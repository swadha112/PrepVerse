export type Track = { name: string; slug: string };

export const TRACKS: Track[] = [
  { name: "Array", slug: "array" },
  { name: "String", slug: "string" },
  { name: "Hash Table", slug: "hash-table" },
  { name: "Dynamic Programming", slug: "dynamic-programming" },
  { name: "Math", slug: "math" },
  { name: "Sorting", slug: "sorting" },
  { name: "Greedy", slug: "greedy" },
  { name: "Depth-First Search", slug: "depth-first-search" },
  { name: "Binary Search", slug: "binary-search" },
  { name: "Database", slug: "database" },
  { name: "Matrix", slug: "matrix" },
  { name: "Tree", slug: "tree" },
  { name: "Breadth-First Search", slug: "breadth-first-search" },
  { name: "Bit Manipulation", slug: "bit-manipulation" },
  { name: "Two Pointers", slug: "two-pointers" },
  { name: "Prefix Sum", slug: "prefix-sum" },
  { name: "Heap (Priority Queue)", slug: "heap-priority-queue" },
  { name: "Simulation", slug: "simulation" },
  { name: "Binary Tree", slug: "binary-tree" },
  { name: "Graph", slug: "graph" },
  { name: "Stack", slug: "stack" },
  { name: "Counting", slug: "counting" },
  { name: "Sliding Window", slug: "sliding-window" },
  { name: "Design", slug: "design" },
  { name: "Enumeration", slug: "enumeration" },
  { name: "Backtracking", slug: "backtracking" },
  { name: "Union Find", slug: "union-find" },
  { name: "Linked List", slug: "linked-list" },
  { name: "Number Theory", slug: "number-theory" },
  { name: "Ordered Set", slug: "ordered-set" },
  { name: "Monotonic Stack", slug: "monotonic-stack" },
  { name: "Segment Tree", slug: "segment-tree" },
  { name: "Trie", slug: "trie" },
  { name: "Combinatorics", slug: "combinatorics" },
  { name: "Bitmask", slug: "bitmask" },
  { name: "Divide and Conquer", slug: "divide-and-conquer" },
  { name: "Queue", slug: "queue" },
  { name: "Recursion", slug: "recursion" },
  { name: "Geometry", slug: "geometry" },
  { name: "Binary Indexed Tree", slug: "binary-indexed-tree" },
  { name: "Memoization", slug: "memoization" },
  { name: "Hash Function", slug: "hash-function" },
  { name: "Binary Search Tree", slug: "binary-search-tree" },
  { name: "Shortest Path", slug: "shortest-path" },
  { name: "String Matching", slug: "string-matching" },
  { name: "Topological Sort", slug: "topological-sort" },
  { name: "Rolling Hash", slug: "rolling-hash" },
  { name: "Game Theory", slug: "game-theory" },
  { name: "Interactive", slug: "interactive" },
  { name: "Data Stream", slug: "data-stream" },
  { name: "Monotonic Queue", slug: "monotonic-queue" },
  { name: "Brainteaser", slug: "brainteaser" },
  { name: "Doubly-Linked List", slug: "doubly-linked-list" },
  { name: "Randomized", slug: "randomized" },
  { name: "Merge Sort", slug: "merge-sort" },
  { name: "Counting Sort", slug: "counting-sort" },
  { name: "Iterator", slug: "iterator" },
  { name: "Concurrency", slug: "concurrency" },
  { name: "Probability and Statistics", slug: "probability-and-statistics" },
  { name: "Quickselect", slug: "quickselect" },
  { name: "Suffix Array", slug: "suffix-array" },
  { name: "Line Sweep", slug: "line-sweep" },
  { name: "Minimum Spanning Tree", slug: "minimum-spanning-tree" },
  { name: "Bucket Sort", slug: "bucket-sort" },
  { name: "Shell", slug: "shell" },
  { name: "Reservoir Sampling", slug: "reservoir-sampling" },
  { name: "Strongly Connected Component", slug: "strongly-connected-component" },
  { name: "Eulerian Circuit", slug: "eulerian-circuit" },
  { name: "Radix Sort", slug: "radix-sort" },
  { name: "Rejection Sampling", slug: "rejection-sampling" },
  { name: "Biconnected Component", slug: "biconnected-component" }
];
